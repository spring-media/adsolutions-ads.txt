name: Deploy "master" via AWS SSM

on:
  push:
    branches: [ master ]

permissions:
  id-token: write
  contents: write

jobs:
  deploy:
    name: Deploy via SSM
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          role-to-assume: arn:aws:iam::003077251232:role/GithubDeploy
          role-session-name: GitHubActionSession

      - name: sync with beta
        if: success()
        run: |
          set -euo pipefail
          git config user.name  "tech-adtechnology"
          git config user.email "adtechnology@axelspringer.com"
          
          git checkout beta
          git merge master
          git push

      - name: Zip files
        run: |
          zip -r ${{ github.event.repository.name }}_${{ github.ref_name }}.zip ./

      - name: Upload artifact to S3 (temporÃ¤r)
        run: |
          aws s3 cp ${{ github.event.repository.name }}_${{ github.ref_name }}.zip s3://github-deploy-003077251232/${{ github.event.repository.name }}_${{ github.ref_name }}.zip

      - name: Trigger deploy command via SSM to adtechs
        run: |
          aws ssm send-command \
            --instance-ids i-0b492105afc5cf848 \
            --document-name "arn:aws:ssm:eu-central-1::document/AWS-RunShellScript"  \
            --comment "GitHub Actions Deploy" \
            --parameters '{
              "commands": [
                "aws s3 cp s3://github-deploy-003077251232/${{ github.event.repository.name }}_${{ github.ref_name }}.zip /tmp/${{ github.event.repository.name }}_${{ github.ref_name }}.zip",
                "unzip -o /tmp/${{ github.event.repository.name }}_${{ github.ref_name }}.zip -d /var/www/projects/_workCopies/${{ github.event.repository.name }}",
                "cd /var/www/projects/_workCopies/${{ github.event.repository.name }} && npm i && npm run build && npm run deploy"
              ]
            }' \
            --timeout-seconds 600 \
            --region eu-central-1

  updateBILD:
    runs-on: ubuntu-latest
    needs: deploy
    name: update BILD files

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          path: src

      - name: Run ads.txt deployment
        working-directory: src
        run: |
          npm i
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          role-to-assume: arn:aws:iam::003077251232:role/GithubDeploy
          role-session-name: GitHubActionSession

      - name: Retrieve GitHub credentials from AWS Secrets Manager
        id: secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,Github
          parse-json-secrets: true

      - name: Export as output
        id: expose
        run: |
          echo "token=${TECH_ADTECHNOLOGY_OAUTH}" >> "$GITHUB_OUTPUT"

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: spring-media/red-static-content
          ref: main
          token: ${{ steps.expose.outputs.token }}
          path: dest

      - name: Fetch source files
        id: fetch
        shell: bash
        run: |
          set -euo pipefail
          cp -u src/_dist/bild.de/ads.txt dest/bild/bild/ads.txt
          cp -u src/_dist/bild.de/app-ads.txt dest/bild/bild/app-ads.txt
          cp -u src/_dist/sportbild.de/ads.txt dest/bild/sportbild/ads.txt
          cp -u src/_dist/sportbild.de/app-ads.txt dest/bild/sportbild/app-ads.txt

      - name: Debug file transfer and git detection
        working-directory: dest
        shell: bash
        run: |
          echo "============ DEBUG INFORMATION ============"
          
          echo "1. SOURCE FILES CHECK"
          echo "Checking if source files exist:"
          ls -la ../src/_dist/bild.de/ || echo "Source directory bild.de not found!"
          ls -la ../src/_dist/sportbild.de/ || echo "Source directory sportbild.de not found!"
          
          echo "Source file content samples (first 5 lines):"
          echo "bild.de/ads.txt:"
          head -n 5 ../src/_dist/bild.de/ads.txt || echo "File not found!"
          echo "Last 3 lines (should contain timestamp):"
          tail -n 3 ../src/_dist/bild.de/ads.txt || echo "File not found!"
          
          echo "2. DESTINATION DIRECTORIES CHECK"
          echo "Checking if destination directories exist:"
          ls -la bild/bild/ || echo "Destination directory bild/bild not found!"
          ls -la bild/sportbild/ || echo "Destination directory bild/sportbild not found!"
          
          echo "3. FILE COPY VERIFICATION"
          echo "Checking if files were copied (should show content if copy succeeded):"
          echo "bild/bild/ads.txt:"
          cat bild/bild/ads.txt 2>/dev/null | tail -n 3 || echo "File not found or empty!"
          echo "bild/bild/app-ads.txt:"
          cat bild/bild/app-ads.txt 2>/dev/null | tail -n 3 || echo "File not found or empty!"
          echo "bild/sportbild/ads.txt:"
          cat bild/sportbild/ads.txt 2>/dev/null | tail -n 3 || echo "File not found or empty!"
          echo "bild/sportbild/app-ads.txt:"
          cat bild/sportbild/app-ads.txt 2>/dev/null | tail -n 3 || echo "File not found or empty!"
          
          echo "4. GIT STATUS CHECK"
          echo "Git status output:"
          git status
          
          echo "Git status --porcelain output (should show modified files):"
          git status --porcelain
          
          echo "5. FILE DIFFERENCE CHECK"
          echo "Checking if there are differences between source and destination files:"
          echo "bild.de/ads.txt vs bild/bild/ads.txt:"
          diff -q ../src/_dist/bild.de/ads.txt bild/bild/ads.txt || echo "Files are different (expected)"
          
          echo "6. GIT DIFF CHECK"
          echo "Git diff output (should show changes):"
          git diff bild/bild/ads.txt || echo "No git diff detected!"
          
          echo "7. TIMESTAMP VERIFICATION"
          echo "Checking timestamps in files:"
          echo "Source file timestamp:"
          grep "File generated on" ../src/_dist/bild.de/ads.txt || echo "No timestamp found in source!"
          echo "Destination file timestamp:"
          grep "File generated on" bild/bild/ads.txt || echo "No timestamp found in destination!"
          
          echo "============ END DEBUG INFORMATION ============"

      - name: Commit & push changes
        working-directory: dest
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "tech-adtechnology"
          git config user.email "adtechnology@axelspringer.com"

          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "updated (app-)ads.txt by adtechs repo hook"
            git push
          else
            echo "No changes to commit."
          fi
